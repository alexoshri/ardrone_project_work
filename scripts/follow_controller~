#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy,roslib
from std_msgs.msg import String, Bool, Empty
from ardrone_autonomy.msg import Navdata
from drone_controller import droneStatus
from ardrone_project.msg import ImageCalc

class follow_controller:
    def __init__(self):
        self._enableControl = False
        self._shift = 0
        self._angle = 0

        rospy.init_node('follow_controller',anonymous = False)
        self._pubCommand = rospy.Publisher('drone_controller/com', String ,queue_size = 1)
        self._rateCommand = rospy.Rate(5) #5Hz

        rospy.Subscriber('image_converter/calc', ImageCalc, self.callbackCalc)
        rospy.Subscriber('ardrone/navdata', Navdata, self.callbackNavdata)
        rospy.Subscriber('follow_controller/enable_control', Bool, self.callbackEnableControl)        

    def callbackEnableControl(self, msg):
	flag = msg.data
	print "Enable/Disable Control = {}".format(flag)
	self._enableControl = flag
	

    def callbackNavdata(self,navdata):        
        self._droneStatus = navdata.state
    
    def callbackCalc(self,data):
        self._shift = data.shift
	self._angle = data.angle

    def cleanup(self):
        print("followController cleanup method")

    def sleep(self):
        self._rateCommand.sleep()


if __name__ == "__main__":
    controller = follow_controller()
    print("Hello")

    try:
        while not rospy.is_shutdown():
	    if controller._enableControl == True:
		    horiz_vel = (0.2/1000) * controller._shift # POSITIVE velocity = move LEFT
		    command = "SET_VELOCITY 0 {} 0 0 0 0".format(horiz_vel)
                    print("follow_cntroller: " + command)
                    controller._pubCommand.publish(command)
		    controller.sleep()

                    command = "HOVER"
		    #controller._pubCommand.publish(command)
	            print("follow_cntroller: " + command)

                    angular_vel = 0.01 * controller._angle
                    command = "SET_VELOCITY 0 0 0 0 0 {}".format(angular_vel)
		    print("follow_cntroller: " + command)
		    controller._pubCommand.publish(command)
		    controller.sleep()
                    
		    command = "HOVER"
		    #controller._pubCommand.publish(command)
	            print("follow_cntroller: " + command)
            #else:
		#print "EnableControl is False"

    except rospy.ROSInterruptException:
        print("droneController: ROSInterruptException")
    finally:
        controller.cleanup()

